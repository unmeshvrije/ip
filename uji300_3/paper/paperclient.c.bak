/*++

Module Name:
	paperclient.c.

Abstract:
	This module implements paper client.

Revision History:
	Date    : Oct 07 2012.

	Author  : Unmesh Joshi (S-2515965).
		: Koustubha Bhat (S-2516144).

	VUnetID : uji300
		: kbt350

	Desc    : Created.
	
--*/

//===================================================================
//	Requirements
//===================================================================
//


//===================================================================
//	Test Cases
//===================================================================
//


/////////////////////////////////////////////////////////////////////
//	H E A D E R S.
/////////////////////////////////////////////////////////////////////

#include "paperclient.h"

#include "../common.h"

#include <fcntl.h>
#include <sys/io.h>


/////////////////////////////////////////////////////////////////////
//	M A C R O S.
/////////////////////////////////////////////////////////////////////

#define	TEST_ADD	0
#define	TEST_SHOW	0
#define TEST_FETCH 0
#define TEST_LIST 1

#define CLIENT_LOG_FILE "./client.log"

/////////////////////////////////////////////////////////////////////
//	G L O B A L S
/////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////
//	F U N C T I O N  D E F I N T I O N S
/////////////////////////////////////////////////////////////////////
 

//
// This function cannot have name as "SendDetails"
// May be because the same name (though lowercase)
// has been taken by senddetails_1() server procedure
//
int SendDetailsInternal(PAPER *pPaper, CLIENT *pClient)
{
  int iFd;
  int iRead;
  int *piIndex;
  int iChunkIndex;

  iFd = open(pPaper->szFileName, O_RDONLY);
  if (-1 == iFd)
  {
    return -1;
  }

  pPaper->lFileSize = lseek(iFd, 0L, SEEK_END);
  pPaper->iChunkIndex = 0;
  printf("Reading file of size = %ld", pPaper->lFileSize);
  getchar();
  lseek(iFd, 0, SEEK_SET);

  
  //
  // Prepare entire node here and send, so that
  // server's job is just to add the node to his list
  // or
  // we can send chunk by chunk from client and
  // somehow collect all chunks in the same node and then
  // add the node to server list
  //
  while (1)
  {
    iRead = read(iFd, pPaper->ByteFileChunk, ARRAY_SIZE(pPaper->ByteFileChunk));
    if (-1 == iRead || 0 == iRead)
    {
      // some error
      // may be end of file
      break;
    }

    pPaper->lChunkSize = (long)iRead;
    piIndex = senddetails_1(pPaper, pClient);
    if (NULL == piIndex)
    {
      printf("fail\n");
    }
    else
    {
      printf("Index = %d, Chunk Size = %d\n", *piIndex, iRead);
      pPaper->iPaperNo = *piIndex;
    }

    //printf("We are at %ld", lseek(iFd, 0, SEEK_CUR));
    //getchar();
    ++pPaper->iChunkIndex;
  }

  pPaper->iChunkIndex = -1;
  piIndex = senddetails_1(pPaper, pClient);
  if (NULL == piIndex)
   printf("fail last\n");
  else
    printf("LAST content\n");

  close(iFd);

  return 0;
}

int FetchDetailsInternal(int *piIndex, CLIENT *pClient)
{
  int iLoop;
  PAPER *pPaper;
  char szLogBuffer[MAX_BUF];

  while (1)
  {
    pPaper = fetchdetails_1(piIndex, pClient);

    if (NULL == pPaper)
    {
      printf("fail\n");
    }
    else
    {
      sprintf(szLogBuffer, "lChunkSize = %d", pPaper->lChunkSize);
      Log(CLIENT_LOG_FILE, szLogBuffer, "FetchDetailsInternal", LOGLEVEL_INFO, NULL);

      for (iLoop = 0; iLoop < pPaper->lChunkSize; ++iLoop)
        printf("%c", pPaper->ByteFileChunk[iLoop]);
    }

    if (-1 == pPaper->iChunkIndex)
    {
      break;
    }
  }
}


int FetchListInternal(CLIENT *pClient)
{
  int iLoop;
  PAPER *pPaper;
  char szLogBuffer[MAX_BUF];

  while (1)
  {
    pPaper = fetchlist_1(NULL, pClient);

    if (NULL == pPaper)
    {
      printf("fail\n");
      break;
    }

    if (-1 == pPaper->iChunkIndex)
    {
      Log(CLIENT_LOG_FILE, "breaking", "FetchListInternal", LOGLEVEL_INFO, NULL);
      break;
    }

    printf("%d\t%s\t%s\n", pPaper->iPaperNo, pPaper->szAuthors, pPaper->szPaperTitle);
  }
}

int RemoveDetailsInternal(int iIndex, CLIENT *pClient)
{
  int *piRet;

  piRet = removedetails_1(&iIndex, pClient);
  if (NULL == piRet)
  {
    printf("fail\n");
  }
  else if(-1 == *piRet)
  {
    printf("Paper record not found\n");
  }
  else
  {
    printf("Paper record deleted\n");
  }
}

int main(int argc, char *argv[])
{
//  int *piIndex;
  CLIENT *pClient;
  PAPER Paper;
  
  int iIndex;
  PAPER *pPaper;

  memset(&Paper, 0, sizeof(Paper));
  Paper.iPaperNo = -1;
  strcpy(Paper.szAuthors, "ramsay");
  strcpy(Paper.szPaperTitle, "amoeba");
  //strcpy(Paper.szFileName, "/home/unmesh/Downloads/amoeba.pdf");
  strcpy(Paper.szFileName, "/home/unmesh/Downloads/format.c");

  pClient = clnt_create(argv[1], PAPER_STORAGE_SERVER, VERSION1, "tcp");
  if (NULL == pClient)
  {
    printf("\nConnection could not be established.");
    return 0;
  }

  #if TEST_ADD
  SendDetailsInternal(&Paper, pClient);
  #endif

  #if TEST_SHOW
  iIndex = atoi(argv[2]);
  pPaper = showdetails_1(&iIndex, pClient);

  if (NULL == pPaper)
  {
    printf("fail\n");
  }
  else
  {
    printf("%s\t%s\n", pPaper->szAuthors, pPaper->szPaperTitle);
  }
  #endif

  #if TEST_FETCH
  iIndex = atoi(argv[2]);
  FetchDetailsInternal(&iIndex, pClient);
  #endif

  #if TEST_LIST
  FetchListInternal(pClient);
  #endif

  iIndex = atoi(argv[2]);
  RemoveDetailsInternal(iIndex, pClient);

  return 0;
}
